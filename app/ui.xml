<?xml version="1.0" encoding="utf-8"?>
<package xmlns="http://ns.saxonica.com/xslt/export" xmlns:fn="http://www.w3.org/2005/xpath-functions" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:vv="http://saxon.sf.net/generated-variable" xmlns:java-type="http://saxon.sf.net/java-type" version="30" packageVersion="1" saxonVersion="9.8.0.12" target="JS" targetVersion="1" relocatable="true">
 <co id="0" binds="">
  <function name="Q{local}remove-indent" line="284" module="ui.xsl" eval="9" flags="pU" as="item()*" slots="5">
   <arg name="text" as="item()*"/>
   <let role="body" ns="xsl=~ ixsl=~ xs=~ svg=http://www.w3.org/2000/svg map=http://www.w3.org/2005/xpath-functions/map local=local" line="293" var="indent-num" as="xs:anyAtomicType?" slot="1" eval="8">
    <fn name="min">
     <for var="line" as="xs:string" slot="2">
      <fn role="in" name="tokenize">
       <fn name="replace">
        <treat as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="0|0||fn:replace">
         <check card="?" diag="0|0||fn:replace">
          <cvUntyped to="xs:string">
           <data>
            <varRef name="text" slot="0"/>
           </data>
          </cvUntyped>
         </check>
        </treat>
        <str val="^&#xA;"/>
        <str val=""/>
        <str val=""/>
       </fn>
       <str val="&#xA;"/>
       <str val=""/>
      </fn>
      <choose role="return" line="295">
       <fn name="matches">
        <varRef name="line" slot="2"/>
        <str val="^ +$"/>
        <str val=""/>
       </fn>
       <dbl val="INF"/>
       <true/>
       <arith op="-" calc="i-i">
        <fn name="string-length">
         <varRef name="line" slot="2"/>
        </fn>
        <fn name="string-length">
         <fn name="replace">
          <varRef name="line" slot="2"/>
          <str val="^ +"/>
          <str val=""/>
          <str val=""/>
         </fn>
        </fn>
       </arith>
      </choose>
     </for>
    </fn>
    <let line="298" var="vv:v0" as="xs:numeric" slot="3" eval="13">
     <check card="1" diag="0|1||fn:substring">
      <arith op="+" calc="a+a">
       <cvUntyped to="xs:double">
        <varRef name="indent-num" slot="1"/>
       </cvUntyped>
       <int val="1"/>
      </arith>
     </check>
     <valueOf line="297">
      <fn name="string-join">
       <for var="line" as="xs:string" slot="4">
        <fn role="in" name="tokenize">
         <treat as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="0|0||fn:tokenize">
          <check card="?" diag="0|0||fn:tokenize">
           <cvUntyped to="xs:string">
            <data>
             <varRef name="text" slot="0"/>
            </data>
           </cvUntyped>
          </check>
         </treat>
         <str val="&#xA;"/>
         <str val=""/>
        </fn>
        <fn role="return" line="298" name="concat">
         <fn name="substring">
          <varRef name="line" slot="4"/>
          <varRef name="vv:v0" slot="3"/>
          <fn name="string-length">
           <varRef name="line" slot="4"/>
          </fn>
         </fn>
         <str val="&#xA;"/>
        </fn>
       </for>
       <str val=" "/>
      </fn>
     </valueOf>
    </let>
   </let>
  </function>
 </co>
 <co id="1" binds="1 2">
  <mode name="Q{}stories" onNo="TC" flags="W" patternSlots="0">
   <templateRule prec="0" prio="0.0" seq="0" rank="0" minImp="0" slots="0" flags="s" line="155" module="ui.xsl">
    <p.nodeTest role="match" test="element(Q{}g)" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri===''&amp;&amp;q.local==='g';"/>
    <elem role="action" ns="xsl=~ ixsl=~ xs=~ svg=http://www.w3.org/2000/svg map=http://www.w3.org/2005/xpath-functions/map local=local" line="156" name="div" nsuri="" namespaces="map svg local">
     <sequence>
      <att name="class" flags="l">
       <str val="g-story"/>
      </att>
      <choose line="157">
       <fn name="exists">
        <axis name="attribute" nodeTest="attribute(Q{}note)" jsTest="return item.name==='note'"/>
       </fn>
       <elem line="158" name="h3" nsuri="" flags="l" namespaces="map svg local">
        <valueOf flags="l">
         <convert from="xs:untypedAtomic" to="xs:string">
          <attVal name="Q{}note" chk="0"/>
         </convert>
        </valueOf>
       </elem>
      </choose>
      <applyT line="160" mode="Q{}stories" flags="i" bSlot="0">
       <axis role="select" name="child" nodeTest="node()" jsTest="return true;"/>
      </applyT>
     </sequence>
    </elem>
   </templateRule>
   <templateRule prec="0" prio="0.0" seq="1" rank="0" minImp="0" slots="0" flags="s" line="164" module="ui.xsl">
    <p.nodeTest role="match" test="element(Q{}story)" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri===''&amp;&amp;q.local==='story';"/>
    <elem role="action" ns="xsl=~ ixsl=~ xs=~ svg=http://www.w3.org/2000/svg map=http://www.w3.org/2005/xpath-functions/map local=local" line="165" name="div" nsuri="" namespaces="map svg local">
     <sequence>
      <att name="id" flags="l">
       <fn name="concat">
        <str val="_stories:"/>
        <fn name="string">
         <convert from="xs:untypedAtomic" to="xs:string">
          <attVal name="Q{}label" chk="0"/>
         </convert>
        </fn>
       </fn>
      </att>
      <att name="class" flags="l">
       <str val="story"/>
      </att>
      <elem line="166" name="h4" nsuri="" flags="l">
       <valueOf flags="l">
        <convert from="xs:untypedAtomic" to="xs:string">
         <attVal name="Q{}label" chk="0"/>
        </convert>
       </valueOf>
      </elem>
      <applyT line="167" flags="i" bSlot="1">
       <axis role="select" name="child" nodeTest="node()" jsTest="return true;"/>
      </applyT>
     </sequence>
    </elem>
   </templateRule>
  </mode>
 </co>
 <co id="3" binds="3">
  <mode name="Q{}svg" onNo="TC" flags="W" patternSlots="0">
   <templateRule prec="0" prio="-0.5" seq="0" rank="0" minImp="0" slots="0" flags="s" line="277" module="ui.xsl">
    <p.nodeTest role="match" test="element()" jsTest="return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1;"/>
    <compElem role="action" ns="xsl=~ ixsl=~ xs=~ svg=http://www.w3.org/2000/svg map=http://www.w3.org/2005/xpath-functions/map local=local" line="278">
     <fn role="name" name="name">
      <dot type="element()"/>
     </fn>
     <str role="namespace" val="http://www.w3.org/2000/svg"/>
     <sequence role="content" line="279">
      <copyOf flags="vc">
       <axis name="attribute" nodeTest="attribute()" jsTest="return SaxonJS.U.isAttr(item)"/>
      </copyOf>
      <applyT line="280" mode="Q{}svg" bSlot="0">
       <axis role="select" name="child" nodeTest="( element() | text() | comment() | processing-instruction() )" jsTest="return SaxonJS.U.isNode(item) &amp;&amp; (item.nodeType===1 || item.nodeType===3 || item.nodeType===7 || item.nodeType===8);"/>
      </applyT>
     </sequence>
    </compElem>
   </templateRule>
  </mode>
 </co>
 <co id="4" binds="4 4">
  <mode name="Q{}merge" onNo="TC" flags="W" patternSlots="0">
   <templateRule prec="0" prio="-0.5" seq="0" rank="0" minImp="0" slots="1" flags="s" line="57" module="ui.xsl">
    <p.nodeTest role="match" test="attribute()" jsTest="return SaxonJS.U.isAttr(item)"/>
    <sequence role="action" ns="xsl=~ ixsl=~ xs=~ svg=http://www.w3.org/2000/svg map=http://www.w3.org/2005/xpath-functions/map local=local" line="58">
     <param name="Q{}page" slot="0">
      <str role="select" val=""/>
      <supplied role="conversion" slot="0"/>
     </param>
     <copy line="61" flags="cin">
      <choose role="content">
       <gc op="=" card="1:1" comp="CCC">
        <attVal name="Q{}class" chk="0"/>
        <str val="center"/>
       </gc>
       <sequence line="62">
        <applyT mode="Q{}merge" bSlot="0">
         <sequence role="select">
          <axis name="attribute" nodeTest="attribute()" jsTest="return SaxonJS.U.isAttr(item)"/>
          <axis name="child" nodeTest="( element() | text() | comment() | processing-instruction() )" jsTest="return SaxonJS.U.isNode(item) &amp;&amp; (item.nodeType===1 || item.nodeType===3 || item.nodeType===7 || item.nodeType===8);"/>
         </sequence>
        </applyT>
        <copyOf line="63" flags="vc">
         <varRef name="page" slot="0"/>
        </copyOf>
       </sequence>
       <true/>
       <applyT line="66" mode="Q{}merge" bSlot="1">
        <sequence role="select">
         <axis name="attribute" nodeTest="attribute()" jsTest="return SaxonJS.U.isAttr(item)"/>
         <axis name="child" nodeTest="( element() | text() | comment() | processing-instruction() )" jsTest="return SaxonJS.U.isNode(item) &amp;&amp; (item.nodeType===1 || item.nodeType===3 || item.nodeType===7 || item.nodeType===8);"/>
        </sequence>
        <withParam name="Q{}page">
         <varRef line="67" name="page" slot="0"/>
        </withParam>
       </applyT>
      </choose>
     </copy>
    </sequence>
   </templateRule>
   <templateRule prec="0" prio="-0.5" seq="0" rank="0" minImp="0" slots="1" flags="s" line="57" module="ui.xsl">
    <p.nodeTest role="match" test="( element() | text() | comment() | processing-instruction() )" jsTest="return SaxonJS.U.isNode(item) &amp;&amp; (item.nodeType===1 || item.nodeType===3 || item.nodeType===7 || item.nodeType===8);"/>
    <sequence role="action" ns="xsl=~ ixsl=~ xs=~ svg=http://www.w3.org/2000/svg map=http://www.w3.org/2005/xpath-functions/map local=local" line="58">
     <param name="Q{}page" slot="0">
      <str role="select" val=""/>
      <supplied role="conversion" slot="0"/>
     </param>
     <copy line="61" flags="cin">
      <choose role="content">
       <gc op="=" card="1:1" comp="CCC">
        <attVal name="Q{}class" chk="0"/>
        <str val="center"/>
       </gc>
       <sequence line="62">
        <applyT mode="Q{}merge" bSlot="0">
         <sequence role="select">
          <axis name="attribute" nodeTest="attribute()" jsTest="return SaxonJS.U.isAttr(item)"/>
          <axis name="child" nodeTest="( element() | text() | comment() | processing-instruction() )" jsTest="return SaxonJS.U.isNode(item) &amp;&amp; (item.nodeType===1 || item.nodeType===3 || item.nodeType===7 || item.nodeType===8);"/>
         </sequence>
        </applyT>
        <copyOf line="63" flags="vc">
         <varRef name="page" slot="0"/>
        </copyOf>
       </sequence>
       <true/>
       <applyT line="66" mode="Q{}merge" bSlot="1">
        <sequence role="select">
         <axis name="attribute" nodeTest="attribute()" jsTest="return SaxonJS.U.isAttr(item)"/>
         <axis name="child" nodeTest="( element() | text() | comment() | processing-instruction() )" jsTest="return SaxonJS.U.isNode(item) &amp;&amp; (item.nodeType===1 || item.nodeType===3 || item.nodeType===7 || item.nodeType===8);"/>
        </sequence>
        <withParam name="Q{}page">
         <varRef line="67" name="page" slot="0"/>
        </withParam>
       </applyT>
      </choose>
     </copy>
    </sequence>
   </templateRule>
  </mode>
 </co>
 <co id="5" binds="4">
  <template name="Q{}merge" flags="os" line="49" module="ui.xsl" slots="2">
   <sequence role="body" ns="xsl=~ ixsl=~ xs=~ svg=http://www.w3.org/2000/svg map=http://www.w3.org/2005/xpath-functions/map local=local" line="50">
    <param name="Q{}base" slot="0">
     <str role="select" val=""/>
     <supplied role="conversion" slot="0"/>
    </param>
    <param line="51" name="Q{}page" slot="1">
     <str role="select" val=""/>
     <supplied role="conversion" slot="1"/>
    </param>
    <applyT line="52" mode="Q{}merge" flags="t" bSlot="0">
     <varRef role="select" name="base" slot="0"/>
     <withParam name="Q{}page">
      <varRef line="53" name="page" slot="1"/>
     </withParam>
    </applyT>
   </sequence>
  </template>
 </co>
 <co id="6" binds="4">
  <template name="Q{}load-page" flags="os" line="74" module="ui.xsl" slots="8">
   <sequence role="body" ns="xsl=~ ixsl=~ xs=~ svg=http://www.w3.org/2000/svg map=http://www.w3.org/2005/xpath-functions/map local=local" line="75">
    <param name="Q{}page-ref" slot="0">
     <str role="select" val=""/>
     <supplied role="conversion" slot="0"/>
    </param>
    <resultDoc line="76" global="#&#xA;#Mon Apr 08 13:32:16 JST 2019&#xA;method=html&#xA;" local="#&#xA;#Mon Apr 08 13:32:16 JST 2019&#xA;method={http\://saxonica.com/ns/interactiveXSLT}replace-content&#xA;">
     <str role="href" val="#screen"/>
     <let role="content" line="77" var="page-ref-tmp" as="xs:string" slot="1" eval="8">
      <fn name="substring-after">
       <treat as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="0|0||fn:substring-after">
        <check card="?" diag="0|0||fn:substring-after">
         <cvUntyped to="xs:string">
          <data>
           <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}get" type="item()*">
            <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
            <str val="location.href"/>
           </ifCall>
          </data>
         </cvUntyped>
        </check>
       </treat>
       <str val="#"/>
      </fn>
      <choose line="80">
       <vc op="eq" onEmpty="0" comp="CCC">
        <varRef name="page-ref-tmp" slot="1"/>
        <str val="_allpages"/>
       </vc>
       <let line="81" var="page" as="element(Q{}div)*" slot="2" eval="8">
        <docOrder intra="1">
         <filter flags="b">
          <slash>
           <slash>
            <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}page" type="document-node()?"/>
            <fn name="key">
             <str val="Q{http://saxon.sf.net/}kk102"/>
             <str val="pageset"/>
             <dot type="document-node()"/>
            </fn>
           </slash>
           <axis name="descendant" nodeTest="element(Q{}div)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri===''&amp;&amp;q.local==='div';"/>
          </slash>
          <gc op="=" card="1:1" comp="CCC">
           <attVal name="Q{}id" chk="0"/>
           <varRef name="page-ref-tmp" slot="1"/>
          </gc>
         </filter>
        </docOrder>
        <copyOf line="82" flags="vc">
         <varRef name="page" slot="2"/>
        </copyOf>
       </let>
       <fn line="84" name="starts-with">
        <varRef name="page-ref-tmp" slot="1"/>
        <str val="_stories"/>
       </fn>
       <let line="85" var="page" as="element(Q{}div)*" slot="3" eval="8">
        <docOrder intra="1">
         <filter flags="b">
          <slash>
           <slash>
            <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}page" type="document-node()?"/>
            <fn name="key">
             <str val="Q{http://saxon.sf.net/}kk102"/>
             <str val="pageset"/>
             <dot type="document-node()"/>
            </fn>
           </slash>
           <axis name="descendant" nodeTest="element(Q{}div)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri===''&amp;&amp;q.local==='div';"/>
          </slash>
          <gc op="=" card="1:1" comp="CCC">
           <attVal name="Q{}id" chk="0"/>
           <first>
            <fn name="tokenize">
             <varRef name="page-ref-tmp" slot="1"/>
             <str val=":"/>
             <str val=""/>
            </fn>
           </first>
          </gc>
         </filter>
        </docOrder>
        <copyOf line="86" flags="vc">
         <varRef name="page" slot="3"/>
        </copyOf>
       </let>
       <true/>
       <let line="89" var="page-ref" as="xs:string" slot="4" eval="7">
        <choose>
         <fn name="not">
          <varRef name="page-ref-tmp" slot="1"/>
         </fn>
         <str val="index"/>
         <true/>
         <varRef name="page-ref-tmp" slot="1"/>
        </choose>
        <let line="90" var="page" as="element(Q{}div)*" slot="5" eval="8">
         <docOrder intra="1">
          <filter flags="b">
           <slash>
            <slash>
             <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}page" type="document-node()?"/>
             <fn name="key">
              <str val="Q{http://saxon.sf.net/}kk102"/>
              <str val="pageset"/>
              <dot type="document-node()"/>
             </fn>
            </slash>
            <axis name="descendant" nodeTest="element(Q{}div)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri===''&amp;&amp;q.local==='div';"/>
           </slash>
           <gc op="=" card="1:1" comp="CCC">
            <attVal name="Q{}id" chk="0"/>
            <varRef name="page-ref" slot="4"/>
           </gc>
          </filter>
         </docOrder>
         <let line="91" var="base-ref" as="attribute(Q{}base-ref)?" slot="6" eval="7">
          <lastOf>
           <slash>
            <filter flags="b">
             <filter flags="b">
              <slash simple="1">
               <treat as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="1|0|XPTY0019|/">
                <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}source" type="item()?"/>
               </treat>
               <axis name="descendant" nodeTest="element(Q{}g)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri===''&amp;&amp;q.local==='g';"/>
              </slash>
              <fn name="exists">
               <axis name="attribute" nodeTest="attribute(Q{}base-ref)" jsTest="return item.name==='base-ref'"/>
              </fn>
             </filter>
             <fn name="exists">
              <filter flags="b">
               <axis name="descendant" nodeTest="element(Q{}page)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri===''&amp;&amp;q.local==='page';"/>
               <gc op="=" card="1:1" comp="CCC">
                <attVal name="Q{}id" chk="0"/>
                <varRef name="page-ref" slot="4"/>
               </gc>
              </filter>
             </fn>
            </filter>
            <axis name="attribute" nodeTest="attribute(Q{}base-ref)" jsTest="return item.name==='base-ref'"/>
           </slash>
          </lastOf>
          <let line="92" var="base" as="element(Q{}div)?" slot="7" eval="7">
           <lastOf>
            <docOrder intra="1">
             <filter flags="b">
              <slash>
               <slash>
                <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}page" type="document-node()?"/>
                <fn name="key">
                 <str val="Q{http://saxon.sf.net/}kk102"/>
                 <str val="baseset"/>
                 <dot type="document-node()"/>
                </fn>
               </slash>
               <axis name="descendant" nodeTest="element(Q{}div)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri===''&amp;&amp;q.local==='div';"/>
              </slash>
              <gc op="=" card="1:1" comp="CCC">
               <attVal name="Q{}id" chk="0"/>
               <data>
                <varRef name="base-ref" slot="6"/>
               </data>
              </gc>
             </filter>
            </docOrder>
           </lastOf>
           <choose line="94">
            <fn name="exists">
             <varRef name="base" slot="7"/>
            </fn>
            <applyT line="95" mode="Q{}merge" bSlot="0">
             <varRef role="select" name="base" slot="7"/>
             <withParam name="Q{}page" as="element(Q{}div)*">
              <varRef line="96" name="page" slot="5"/>
             </withParam>
            </applyT>
            <true/>
            <copyOf line="100" flags="vc">
             <varRef name="page" slot="5"/>
            </copyOf>
           </choose>
          </let>
         </let>
        </let>
       </let>
      </choose>
     </let>
    </resultDoc>
   </sequence>
  </template>
 </co>
 <co id="7" binds="2">
  <mode name="Q{}linkset" onNo="TC" flags="W" patternSlots="0">
   <templateRule prec="0" prio="0.0" seq="0" rank="0" minImp="0" slots="0" flags="s" line="211" module="ui.xsl">
    <p.nodeTest role="match" test="element(Q{}link)" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri===''&amp;&amp;q.local==='link';"/>
    <elem role="action" ns="xsl=~ ixsl=~ xs=~ svg=http://www.w3.org/2000/svg map=http://www.w3.org/2005/xpath-functions/map local=local" line="213" name="li" nsuri="" namespaces="map svg local">
     <applyT bSlot="0">
      <dot role="select" type="element(Q{}link)"/>
     </applyT>
    </elem>
   </templateRule>
  </mode>
 </co>
 <co id="8" binds="8">
  <mode name="Q{}story-tree" onNo="TC" flags="W" patternSlots="0">
   <templateRule prec="0" prio="0.0" seq="0" rank="0" minImp="0" slots="0" flags="s" line="171" module="ui.xsl">
    <p.nodeTest role="match" test="element(Q{}g)" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri===''&amp;&amp;q.local==='g';"/>
    <elem role="action" ns="xsl=~ ixsl=~ xs=~ svg=http://www.w3.org/2000/svg map=http://www.w3.org/2005/xpath-functions/map local=local" line="174" name="ul" nsuri="" namespaces="map svg local">
     <elem name="li" nsuri="" flags="l">
      <sequence>
       <elem name="i" nsuri="" flags="l">
        <valueOf flags="l">
         <convert from="xs:untypedAtomic" to="xs:string">
          <attVal name="Q{}note" chk="0"/>
         </convert>
        </valueOf>
       </elem>
       <elem line="176" name="ul" nsuri="" flags="l" namespaces="map svg local">
        <applyT mode="Q{}story-tree" flags="i" bSlot="0">
         <axis role="select" name="child" nodeTest="node()" jsTest="return true;"/>
        </applyT>
       </elem>
      </sequence>
     </elem>
    </elem>
   </templateRule>
   <templateRule prec="0" prio="0.0" seq="1" rank="0" minImp="0" slots="0" flags="s" line="182" module="ui.xsl">
    <p.nodeTest role="match" test="element(Q{}story)" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri===''&amp;&amp;q.local==='story';"/>
    <elem role="action" ns="xsl=~ ixsl=~ xs=~ svg=http://www.w3.org/2000/svg map=http://www.w3.org/2005/xpath-functions/map local=local" line="183" name="li" nsuri="" namespaces="map svg local">
     <elem name="a" nsuri="" flags="l">
      <sequence>
       <att name="href" flags="l">
        <fn name="concat">
         <str val="#_stories:"/>
         <fn name="string">
          <convert from="xs:untypedAtomic" to="xs:string">
           <attVal name="Q{}label" chk="0"/>
          </convert>
         </fn>
        </fn>
       </att>
       <valueOf flags="l">
        <convert from="xs:untypedAtomic" to="xs:string">
         <attVal name="Q{}label" chk="0"/>
        </convert>
       </valueOf>
      </sequence>
     </elem>
    </elem>
   </templateRule>
  </mode>
 </co>
 <co id="9" binds="">
  <mode name="Q{http://saxonica.com/ns/interactiveXSLT}onclick" onNo="TC" flags="W" patternSlots="0">
   <templateRule prec="0" prio="0.0" seq="0" rank="0" minImp="0" slots="0" flags="s" line="44" module="ui.xsl">
    <p.nodeTest role="match" test="element(Q{}a)" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri===''&amp;&amp;q.local==='a';"/>
    <ifCall role="action" ns="xsl=~ ixsl=~ xs=~ svg=http://www.w3.org/2000/svg map=http://www.w3.org/2005/xpath-functions/map local=local" line="46" name="Q{http://saxonica.com/ns/interactiveXSLT}set-property" type="item()?">
     <str val="location.href"/>
     <fn name="concat">
      <fn name="substring-before">
       <treat as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="0|0||fn:substring-before">
        <check card="?" diag="0|0||fn:substring-before">
         <cvUntyped to="xs:string">
          <data>
           <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}get" type="item()*">
            <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
            <str val="location.href"/>
           </ifCall>
          </data>
         </cvUntyped>
        </check>
       </treat>
       <str val="#"/>
      </fn>
      <attVal name="Q{}href" chk="0"/>
     </fn>
     <check card="1" diag="0|2||ixsl:set-property">
      <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
     </check>
    </ifCall>
   </templateRule>
  </mode>
 </co>
 <co id="10" binds="10 10">
  <mode name="Q{}allpages" onNo="TC" flags="W" patternSlots="0">
   <templateRule prec="0" prio="0.0" seq="1" rank="0" minImp="0" slots="0" flags="s" line="127" module="ui.xsl">
    <p.nodeTest role="match" test="element(Q{}g)" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri===''&amp;&amp;q.local==='g';"/>
    <elem role="action" ns="xsl=~ ixsl=~ xs=~ svg=http://www.w3.org/2000/svg map=http://www.w3.org/2005/xpath-functions/map local=local" line="128" name="ul" nsuri="" namespaces="map svg local">
     <sequence>
      <att name="class" flags="l">
       <str val="allpages"/>
      </att>
      <elem line="129" name="li" nsuri="" flags="l" namespaces="map svg local">
       <sequence>
        <valueOf flags="l">
         <str val="&#xA;        {"/>
        </valueOf>
        <valueOf line="130" flags="l">
         <convert from="xs:untypedAtomic" to="xs:string">
          <attVal name="Q{}base-ref" chk="0"/>
         </convert>
        </valueOf>
        <valueOf flags="l">
         <str val="}&#xA;        &#34;"/>
        </valueOf>
        <valueOf line="131" flags="l">
         <convert from="xs:untypedAtomic" to="xs:string">
          <attVal name="Q{}note" chk="0"/>
         </convert>
        </valueOf>
        <valueOf flags="l">
         <str val="&#34;&#xA;        "/>
        </valueOf>
        <applyT line="132" mode="Q{}allpages" flags="i" bSlot="0">
         <axis role="select" name="child" nodeTest="node()" jsTest="return true;"/>
        </applyT>
       </sequence>
      </elem>
     </sequence>
    </elem>
   </templateRule>
   <templateRule prec="0" prio="0.0" seq="0" rank="0" minImp="0" slots="0" flags="s" line="120" module="ui.xsl">
    <p.nodeTest role="match" test="element(Q{}pageset)" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri===''&amp;&amp;q.local==='pageset';"/>
    <elem role="action" ns="xsl=~ ixsl=~ xs=~ svg=http://www.w3.org/2000/svg map=http://www.w3.org/2005/xpath-functions/map local=local" line="121" name="div" nsuri="" namespaces="map svg local">
     <sequence>
      <att name="id" flags="l">
       <str val="_allpages"/>
      </att>
      <att name="class" flags="l">
       <str val="page"/>
      </att>
      <elem line="122" name="h2" nsuri="" flags="l">
       <valueOf flags="l">
        <str val="All Pages"/>
       </valueOf>
      </elem>
      <applyT line="123" mode="Q{}allpages" flags="i" bSlot="1">
       <axis role="select" name="child" nodeTest="node()" jsTest="return true;"/>
      </applyT>
     </sequence>
    </elem>
   </templateRule>
   <templateRule prec="0" prio="0.0" seq="2" rank="0" minImp="0" slots="0" flags="s" line="137" module="ui.xsl">
    <p.nodeTest role="match" test="element(Q{}page)" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri===''&amp;&amp;q.local==='page';"/>
    <elem role="action" ns="xsl=~ ixsl=~ xs=~ svg=http://www.w3.org/2000/svg map=http://www.w3.org/2005/xpath-functions/map local=local" line="139" name="ul" nsuri="" namespaces="map svg local">
     <elem name="li" nsuri="" flags="l">
      <sequence>
       <valueOf flags="l">
        <str val="&#xA;        [ "/>
       </valueOf>
       <elem line="140" name="a" nsuri="" flags="l">
        <sequence>
         <att name="href" flags="l">
          <fn name="concat">
           <str val="#"/>
           <fn name="string">
            <convert from="xs:untypedAtomic" to="xs:string">
             <attVal name="Q{}id" chk="0"/>
            </convert>
           </fn>
          </fn>
         </att>
         <valueOf flags="l">
          <convert from="xs:untypedAtomic" to="xs:string">
           <attVal name="Q{}id" chk="0"/>
          </convert>
         </valueOf>
        </sequence>
       </elem>
       <valueOf flags="l">
        <str val="] "/>
       </valueOf>
       <valueOf line="140" flags="l">
        <convert from="xs:untypedAtomic" to="xs:string">
         <attVal name="Q{}label" chk="0"/>
        </convert>
       </valueOf>
      </sequence>
     </elem>
    </elem>
   </templateRule>
  </mode>
 </co>
 <co id="11" binds="6">
  <mode name="Q{http://saxonica.com/ns/interactiveXSLT}onhashchange" onNo="TC" flags="W" patternSlots="0">
   <templateRule prec="0" prio="-1.0" seq="0" rank="0" minImp="0" slots="0" flags="s" line="38" module="ui.xsl">
    <p.any role="match"/>
    <callT role="action" ns="xsl=~ ixsl=~ xs=~ svg=http://www.w3.org/2000/svg map=http://www.w3.org/2005/xpath-functions/map local=local" line="39" name="load-page" bSlot="0" flags="t">
     <withParam name="Q{}page-ref" flags="c" as="xs:string">
      <fn line="40" name="substring-after">
       <treat as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="0|0||fn:substring-after">
        <check card="?" diag="0|0||fn:substring-after">
         <cvUntyped to="xs:string">
          <data>
           <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}get" type="item()*">
            <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
            <str val="location.href"/>
           </ifCall>
          </data>
         </cvUntyped>
        </check>
       </treat>
       <str val="#"/>
      </fn>
     </withParam>
    </callT>
   </templateRule>
  </mode>
 </co>
 <co id="2" binds="2 2 10 2 6 2 2 2 2 2 2 3 8 1 0 7 2 2 2">
  <mode onNo="TC" flags="dW" patternSlots="0">
   <templateRule prec="0" prio="-0.5" seq="0" rank="0" minImp="0" slots="1" flags="s" line="14" module="ui.xsl">
    <p.nodeTest role="match" test="document-node()" jsTest="return SaxonJS.U.isNode(item) &amp;&amp; (item.nodeType===9||item.nodeType===11);"/>
    <sequence role="action" ns="xsl=~ ixsl=~ xs=~ svg=http://www.w3.org/2000/svg map=http://www.w3.org/2005/xpath-functions/map local=local" line="15">
     <resultDoc global="#&#xA;#Mon Apr 08 13:32:16 JST 2019&#xA;method=html&#xA;" local="#&#xA;#Mon Apr 08 13:32:16 JST 2019&#xA;">
      <str role="href" val="#debug"/>
      <choose role="content" line="16">
       <fn name="empty">
        <fn name="key">
         <str val="Q{http://saxon.sf.net/}kk101"/>
         <str val="index"/>
         <dot type="document-node()"/>
        </fn>
       </fn>
       <elem line="17" name="p" nsuri="" namespaces="map svg local">
        <sequence>
         <valueOf flags="l">
          <str val="Write "/>
         </valueOf>
         <elem name="code" nsuri="" flags="l">
          <valueOf flags="l">
           <str val="&lt;page id=&#34;index&#34; label=&#34;Your title&#34;/&gt;"/>
          </valueOf>
         </elem>
         <valueOf flags="l">
          <str val=", please."/>
         </valueOf>
        </sequence>
       </elem>
      </choose>
     </resultDoc>
     <resultDoc line="20" global="#&#xA;#Mon Apr 08 13:32:16 JST 2019&#xA;method=html&#xA;" local="#&#xA;#Mon Apr 08 13:32:16 JST 2019&#xA;">
      <str role="href" val="#baseset"/>
      <applyT role="content" line="21" bSlot="0">
       <axis role="select" name="descendant" nodeTest="element(Q{}base)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri===''&amp;&amp;q.local==='base';"/>
      </applyT>
     </resultDoc>
     <resultDoc line="23" global="#&#xA;#Mon Apr 08 13:32:16 JST 2019&#xA;method=html&#xA;" local="#&#xA;#Mon Apr 08 13:32:16 JST 2019&#xA;">
      <str role="href" val="#pageset"/>
      <sequence role="content" line="24">
       <applyT bSlot="1">
        <axis role="select" name="descendant" nodeTest="element(Q{}page)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri===''&amp;&amp;q.local==='page';"/>
       </applyT>
       <applyT line="25" mode="Q{}allpages" bSlot="2">
        <axis role="select" name="descendant" nodeTest="element(Q{}pageset)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri===''&amp;&amp;q.local==='pageset';"/>
       </applyT>
       <applyT line="26" bSlot="3">
        <axis role="select" name="descendant" nodeTest="element(Q{}storyset)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri===''&amp;&amp;q.local==='storyset';"/>
       </applyT>
      </sequence>
     </resultDoc>
     <let line="28" var="page-ref-tmp" as="xs:string" slot="0" eval="8">
      <fn name="substring-after">
       <treat as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="0|0||fn:substring-after">
        <check card="?" diag="0|0||fn:substring-after">
         <cvUntyped to="xs:string">
          <data>
           <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}get" type="item()*">
            <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}window" type="item()?"/>
            <str val="location.href"/>
           </ifCall>
          </data>
         </cvUntyped>
        </check>
       </treat>
       <str val="#"/>
      </fn>
      <sequence line="30">
       <callT name="load-page" bSlot="4">
        <withParam name="Q{}page-ref" flags="c" as="xs:string">
         <choose line="29">
          <fn name="not">
           <varRef name="page-ref-tmp" slot="0"/>
          </fn>
          <str val="index"/>
          <true/>
          <varRef name="page-ref-tmp" slot="0"/>
         </choose>
        </withParam>
       </callT>
       <choose line="33">
        <compareToInt op="eq" val="2">
         <fn name="count">
          <fn name="subsequence">
           <fn name="tokenize">
            <varRef name="page-ref-tmp" slot="0"/>
            <str val=":"/>
            <str val=""/>
           </fn>
           <int val="1"/>
           <int val="3"/>
          </fn>
         </fn>
        </compareToInt>
        <ifCall line="34" name="Q{http://saxonica.com/ns/interactiveXSLT}eval" type="item()*">
         <fn name="concat">
          <str val="window.scrollTo(0, document.getElementById(decodeURIComponent('"/>
          <varRef name="page-ref-tmp" slot="0"/>
          <str val="')).offsetTop)"/>
         </fn>
        </ifCall>
       </choose>
      </sequence>
     </let>
    </sequence>
   </templateRule>
   <templateRule prec="0" prio="0.0" seq="11" rank="1" minImp="0" slots="2" flags="s" line="257" module="ui.xsl">
    <p.nodeTest role="match" test="element(Q{}grid)" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri===''&amp;&amp;q.local==='grid';"/>
    <let role="action" ns="xsl=~ ixsl=~ xs=~ svg=http://www.w3.org/2000/svg map=http://www.w3.org/2005/xpath-functions/map local=local" line="258" var="grid" as="element(Q{}grid)" slot="0" eval="7">
     <dot type="element(Q{}grid)"/>
     <let line="263" var="vv:v0" as="element()*" slot="1" eval="4">
      <slash simple="1">
       <varRef name="grid" slot="0"/>
       <axis name="child" nodeTest="element()" jsTest="return item.nodeType===1;"/>
      </slash>
      <elem line="259" name="table" nsuri="" namespaces="map svg local">
       <sequence>
        <att name="border" flags="l">
         <str val="1"/>
        </att>
        <forEach line="260">
         <range from="1" to="3"/>
         <elem line="262" name="tr" nsuri="" flags="l" namespaces="map svg local">
          <forEach>
           <range from="1" to="3"/>
           <elem line="263" name="td" nsuri="" flags="l" namespaces="map svg local">
            <applyT bSlot="5">
             <varRef role="select" name="vv:v0" slot="1"/>
            </applyT>
           </elem>
          </forEach>
         </elem>
        </forEach>
       </sequence>
      </elem>
     </let>
    </let>
   </templateRule>
   <templateRule prec="0" prio="0.0" seq="1" rank="1" minImp="0" slots="0" flags="s" line="108" module="ui.xsl">
    <p.nodeTest role="match" test="element(Q{}base)" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri===''&amp;&amp;q.local==='base';"/>
    <elem role="action" ns="xsl=~ ixsl=~ xs=~ svg=http://www.w3.org/2000/svg map=http://www.w3.org/2005/xpath-functions/map local=local" line="109" name="div" nsuri="" namespaces="map svg local">
     <sequence>
      <att name="id" flags="l">
       <convert from="xs:untypedAtomic" to="xs:string">
        <attVal name="Q{}id" chk="0"/>
       </convert>
      </att>
      <att name="class" flags="l">
       <str val="base"/>
      </att>
      <elem line="110" name="header" nsuri="" flags="l" namespaces="map svg local">
       <applyT bSlot="6">
        <axis role="select" name="child" nodeTest="element(Q{}head)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri===''&amp;&amp;q.local==='head';"/>
       </applyT>
      </elem>
      <elem line="111" name="div" nsuri="" flags="l">
       <sequence>
        <att name="class" flags="l">
         <str val="middle"/>
        </att>
        <elem line="112" name="div" nsuri="" flags="l" namespaces="map svg local">
         <sequence>
          <att name="class" flags="l">
           <str val="left"/>
          </att>
          <applyT bSlot="7">
           <axis role="select" name="child" nodeTest="element(Q{}left)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri===''&amp;&amp;q.local==='left';"/>
          </applyT>
         </sequence>
        </elem>
        <elem line="113" name="div" nsuri="" flags="l" namespaces="map svg local">
         <att name="class" flags="l">
          <str val="center"/>
         </att>
        </elem>
        <elem line="114" name="div" nsuri="" flags="l" namespaces="map svg local">
         <sequence>
          <att name="class" flags="l">
           <str val="right"/>
          </att>
          <applyT bSlot="8">
           <axis role="select" name="child" nodeTest="element(Q{}right)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri===''&amp;&amp;q.local==='right';"/>
          </applyT>
         </sequence>
        </elem>
       </sequence>
      </elem>
      <elem line="116" name="footer" nsuri="" flags="l" namespaces="map svg local">
       <applyT bSlot="9">
        <axis role="select" name="child" nodeTest="element(Q{}foot)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri===''&amp;&amp;q.local==='foot';"/>
       </applyT>
      </elem>
     </sequence>
    </elem>
   </templateRule>
   <templateRule prec="0" prio="0.0" seq="4" rank="1" minImp="0" slots="0" flags="s" line="193" module="ui.xsl">
    <p.nodeTest role="match" test="element(Q{}sect)" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri===''&amp;&amp;q.local==='sect';"/>
    <elem role="action" ns="xsl=~ ixsl=~ xs=~ svg=http://www.w3.org/2000/svg map=http://www.w3.org/2005/xpath-functions/map local=local" line="194" name="div" nsuri="" namespaces="map svg local">
     <sequence>
      <att name="class" flags="l">
       <str val="sect"/>
      </att>
      <choose line="195">
       <fn name="exists">
        <axis name="attribute" nodeTest="attribute(Q{}label)" jsTest="return item.name==='label'"/>
       </fn>
       <elem line="196" name="h3" nsuri="" flags="l" namespaces="map svg local">
        <valueOf flags="l">
         <convert from="xs:untypedAtomic" to="xs:string">
          <attVal name="Q{}label" chk="0"/>
         </convert>
        </valueOf>
       </elem>
      </choose>
      <applyT line="198" flags="i" bSlot="10">
       <axis role="select" name="child" nodeTest="node()" jsTest="return true;"/>
      </applyT>
     </sequence>
    </elem>
   </templateRule>
   <templateRule prec="0" prio="0.0" seq="8" rank="1" minImp="0" slots="0" flags="s" line="242" module="ui.xsl">
    <p.nodeTest role="match" test="element(Q{}input)" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri===''&amp;&amp;q.local==='input';"/>
    <sequence role="action" ns="xsl=~ ixsl=~ xs=~ svg=http://www.w3.org/2000/svg map=http://www.w3.org/2005/xpath-functions/map local=local" line="243">
     <choose>
      <fn name="exists">
       <axis name="attribute" nodeTest="attribute(Q{}label)" jsTest="return item.name==='label'"/>
      </fn>
      <elem line="244" name="label" nsuri="" namespaces="map svg local">
       <valueOf flags="l">
        <convert from="xs:untypedAtomic" to="xs:string">
         <attVal name="Q{}label" chk="0"/>
        </convert>
       </valueOf>
      </elem>
     </choose>
     <elem line="246" name="input" nsuri="" namespaces="map svg local">
      <att name="type" flags="l">
       <str val="text"/>
      </att>
     </elem>
     <elem name="br" nsuri="" namespaces="map svg local">
      <empty/>
     </elem>
    </sequence>
   </templateRule>
   <templateRule prec="0" prio="0.0" seq="12" rank="1" minImp="0" slots="0" flags="s" line="270" module="ui.xsl">
    <p.nodeTest role="match" test="element(Q{}svg)" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri===''&amp;&amp;q.local==='svg';"/>
    <compElem role="action" ns="xsl=~ ixsl=~ xs=~ svg=http://www.w3.org/2000/svg map=http://www.w3.org/2005/xpath-functions/map local=local" line="271">
     <fn role="name" name="name">
      <dot type="element(Q{}svg)"/>
     </fn>
     <str role="namespace" val="http://www.w3.org/2000/svg"/>
     <sequence role="content" line="272">
      <copyOf flags="vc">
       <axis name="attribute" nodeTest="attribute()" jsTest="return SaxonJS.U.isAttr(item)"/>
      </copyOf>
      <applyT line="273" mode="Q{}svg" bSlot="11">
       <axis role="select" name="child" nodeTest="( element() | text() | comment() | processing-instruction() )" jsTest="return SaxonJS.U.isNode(item) &amp;&amp; (item.nodeType===1 || item.nodeType===3 || item.nodeType===7 || item.nodeType===8);"/>
      </applyT>
     </sequence>
    </compElem>
   </templateRule>
   <templateRule prec="0" prio="0.0" seq="2" rank="1" minImp="0" slots="0" flags="s" line="145" module="ui.xsl">
    <p.nodeTest role="match" test="element(Q{}storyset)" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri===''&amp;&amp;q.local==='storyset';"/>
    <elem role="action" ns="xsl=~ ixsl=~ xs=~ svg=http://www.w3.org/2000/svg map=http://www.w3.org/2005/xpath-functions/map local=local" line="146" name="div" nsuri="" namespaces="map svg local">
     <sequence>
      <att name="id" flags="l">
       <str val="_stories"/>
      </att>
      <att name="class" flags="l">
       <str val="page"/>
      </att>
      <elem line="147" name="h2" nsuri="" flags="l">
       <valueOf flags="Sl">
        <str val="Stories"/>
       </valueOf>
      </elem>
      <elem line="148" name="div" nsuri="" flags="l" namespaces="map svg local">
       <sequence>
        <att name="class" flags="l">
         <str val="story-tree"/>
        </att>
        <applyT line="149" mode="Q{}story-tree" flags="i" bSlot="12">
         <axis role="select" name="child" nodeTest="node()" jsTest="return true;"/>
        </applyT>
       </sequence>
      </elem>
      <applyT line="151" mode="Q{}stories" flags="i" bSlot="13">
       <axis role="select" name="child" nodeTest="node()" jsTest="return true;"/>
      </applyT>
     </sequence>
    </elem>
   </templateRule>
   <templateRule prec="0" prio="0.0" seq="6" rank="1" minImp="0" slots="4" flags="s" line="217" module="ui.xsl">
    <p.nodeTest role="match" test="element(Q{}link)" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri===''&amp;&amp;q.local==='link';"/>
    <sequence role="action" ns="xsl=~ ixsl=~ xs=~ svg=http://www.w3.org/2000/svg map=http://www.w3.org/2005/xpath-functions/map local=local" line="218">
     <param name="Q{}class" slot="0">
      <str role="select" val=""/>
      <supplied role="conversion" slot="0"/>
     </param>
     <let line="219" var="page-ref" as="attribute(Q{}page-ref)?" slot="1" eval="8">
      <axis name="attribute" nodeTest="attribute(Q{}page-ref)" jsTest="return item.name==='page-ref'"/>
      <let line="220" var="vv:v0" as="xs:untypedAtomic?" slot="2" eval="13">
       <data>
        <varRef name="page-ref" slot="1"/>
       </data>
       <let var="page" as="element(Q{}page)?" slot="3" eval="7">
        <first>
         <filter flags="b">
          <slash simple="1">
           <treat as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="1|0|XPTY0019|/">
            <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}source" type="item()?"/>
           </treat>
           <axis name="descendant" nodeTest="element(Q{}page)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri===''&amp;&amp;q.local==='page';"/>
          </slash>
          <gc op="=" card="1:1" comp="CCC">
           <attVal name="Q{}id" chk="0"/>
           <varRef name="vv:v0" slot="2"/>
          </gc>
         </filter>
        </first>
        <elem line="221" name="a" nsuri="" namespaces="map svg local">
         <sequence>
          <att name="href" flags="l">
           <fn name="concat">
            <str val="#"/>
            <fn name="string">
             <convert from="xs:untypedAtomic" to="xs:string">
              <data>
               <slash simple="1">
                <varRef name="page" slot="3"/>
                <axis name="attribute" nodeTest="attribute(Q{}id)" jsTest="return item.name==='id'"/>
               </slash>
              </data>
             </convert>
            </fn>
           </fn>
          </att>
          <att name="onclick" flags="l">
           <str val="javascript: return false;"/>
          </att>
          <att name="class" flags="l">
           <fn name="string-join">
            <convert from="xs:anyAtomicType" to="xs:string">
             <data>
              <mergeAdj>
               <varRef name="class" slot="0"/>
              </mergeAdj>
             </data>
            </convert>
            <str val=" "/>
           </fn>
          </att>
          <choose line="223">
           <fn name="exists">
            <axis name="attribute" nodeTest="attribute(Q{}label)" jsTest="return item.name==='label'"/>
           </fn>
           <valueOf line="224" flags="l">
            <convert from="xs:untypedAtomic" to="xs:string">
             <attVal name="Q{}label" chk="0"/>
            </convert>
           </valueOf>
           <true/>
           <valueOf line="227" flags="l">
            <convert from="xs:untypedAtomic" to="xs:string">
             <data>
              <slash simple="1">
               <varRef name="page" slot="3"/>
               <axis name="attribute" nodeTest="attribute(Q{}label)" jsTest="return item.name==='label'"/>
              </slash>
             </data>
            </convert>
           </valueOf>
          </choose>
         </sequence>
        </elem>
       </let>
      </let>
     </let>
    </sequence>
   </templateRule>
   <templateRule prec="0" prio="0.0" seq="10" rank="1" minImp="0" slots="0" flags="s" line="253" module="ui.xsl">
    <p.nodeTest role="match" test="element(Q{}pict)" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri===''&amp;&amp;q.local==='pict';"/>
    <elem role="action" ns="xsl=~ ixsl=~ xs=~ svg=http://www.w3.org/2000/svg map=http://www.w3.org/2005/xpath-functions/map local=local" line="254" name="pre" nsuri="" namespaces="map svg local">
     <valueOf flags="l">
      <fn name="string-join">
       <convert from="xs:anyAtomicType" to="xs:string">
        <data>
         <mergeAdj>
          <ufCall name="Q{local}remove-indent" tailCall="false" bSlot="14" eval="7">
           <dot type="element(Q{}pict)"/>
          </ufCall>
         </mergeAdj>
        </data>
       </convert>
       <str val=" "/>
      </fn>
     </valueOf>
    </elem>
   </templateRule>
   <templateRule prec="0" prio="0.0" seq="5" rank="1" minImp="0" slots="0" flags="s" line="202" module="ui.xsl">
    <p.nodeTest role="match" test="element(Q{}linkset)" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri===''&amp;&amp;q.local==='linkset';"/>
    <sequence role="action" ns="xsl=~ ixsl=~ xs=~ svg=http://www.w3.org/2000/svg map=http://www.w3.org/2005/xpath-functions/map local=local" line="203">
     <choose>
      <fn name="exists">
       <axis name="attribute" nodeTest="attribute(Q{}label)" jsTest="return item.name==='label'"/>
      </fn>
      <elem line="204" name="p" nsuri="" namespaces="map svg local">
       <valueOf flags="l">
        <convert from="xs:untypedAtomic" to="xs:string">
         <attVal name="Q{}label" chk="0"/>
        </convert>
       </valueOf>
      </elem>
     </choose>
     <elem line="207" name="ul" nsuri="" namespaces="map svg local">
      <applyT mode="Q{}linkset" bSlot="15">
       <axis role="select" name="child" nodeTest="element(Q{}link)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri===''&amp;&amp;q.local==='link';"/>
      </applyT>
     </elem>
    </sequence>
   </templateRule>
   <templateRule prec="0" prio="0.0" seq="9" rank="1" minImp="0" slots="0" flags="s" line="249" module="ui.xsl">
    <p.nodeTest role="match" test="element(Q{}text)" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri===''&amp;&amp;q.local==='text';"/>
    <elem role="action" ns="xsl=~ ixsl=~ xs=~ svg=http://www.w3.org/2000/svg map=http://www.w3.org/2005/xpath-functions/map local=local" line="250" name="p" nsuri="" namespaces="map svg local">
     <valueOf flags="l">
      <convert from="xs:untypedAtomic" to="xs:string">
       <data>
        <dot type="element(Q{}text)"/>
       </data>
      </convert>
     </valueOf>
    </elem>
   </templateRule>
   <templateRule prec="0" prio="0.0" seq="3" rank="1" minImp="0" slots="0" flags="s" line="186" module="ui.xsl">
    <p.nodeTest role="match" test="element(Q{}page)" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri===''&amp;&amp;q.local==='page';"/>
    <elem role="action" ns="xsl=~ ixsl=~ xs=~ svg=http://www.w3.org/2000/svg map=http://www.w3.org/2005/xpath-functions/map local=local" line="187" name="div" nsuri="" namespaces="map svg local">
     <sequence>
      <att name="id" flags="l">
       <convert from="xs:untypedAtomic" to="xs:string">
        <attVal name="Q{}id" chk="0"/>
       </convert>
      </att>
      <att name="class" flags="l">
       <str val="page"/>
      </att>
      <elem line="188" name="h2" nsuri="" flags="l">
       <valueOf flags="l">
        <convert from="xs:untypedAtomic" to="xs:string">
         <attVal name="Q{}label" chk="0"/>
        </convert>
       </valueOf>
      </elem>
      <applyT line="189" flags="i" bSlot="16">
       <axis role="select" name="child" nodeTest="node()" jsTest="return true;"/>
      </applyT>
     </sequence>
    </elem>
   </templateRule>
   <templateRule prec="0" prio="0.0" seq="7" rank="1" minImp="0" slots="0" flags="s" line="233" module="ui.xsl">
    <p.nodeTest role="match" test="element(Q{}form)" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri===''&amp;&amp;q.local==='form';"/>
    <elem role="action" ns="xsl=~ ixsl=~ xs=~ svg=http://www.w3.org/2000/svg map=http://www.w3.org/2005/xpath-functions/map local=local" line="235" name="form" nsuri="" namespaces="map svg local">
     <sequence>
      <applyT bSlot="17">
       <axis role="select" name="child" nodeTest="element(Q{}input)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri===''&amp;&amp;q.local==='input';"/>
      </applyT>
      <applyT line="236" bSlot="18">
       <axis role="select" name="child" nodeTest="element(Q{}link)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri===''&amp;&amp;q.local==='link';"/>
       <withParam name="Q{}class" as="xs:string">
        <str val="button"/>
       </withParam>
      </applyT>
     </sequence>
    </elem>
   </templateRule>
  </mode>
 </co>
 <overridden/>
 <key name="Q{http://saxon.sf.net/}kk101" line="0" binds="" flags="u">
  <p.nodeSet type="element(Q{}page)">
   <axis ns="xsl=~ ixsl=~ xs=~ svg=http://www.w3.org/2000/svg map=http://www.w3.org/2005/xpath-functions/map local=local" line="16" name="descendant" nodeTest="element(Q{}page)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri===''&amp;&amp;q.local==='page';"/>
  </p.nodeSet>
  <attVal ns="xsl=~ ixsl=~ xs=~ svg=http://www.w3.org/2000/svg map=http://www.w3.org/2005/xpath-functions/map local=local" line="-1" name="Q{}id" chk="0"/>
 </key>
 <key name="Q{http://saxon.sf.net/}kk102" line="0" binds="" flags="u">
  <p.nodeSet type="element(Q{}div)">
   <axis ns="xsl=~ ixsl=~ xs=~ svg=http://www.w3.org/2000/svg map=http://www.w3.org/2005/xpath-functions/map local=local" line="81" name="descendant" nodeTest="element(Q{}div)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri===''&amp;&amp;q.local==='div';"/>
  </p.nodeSet>
  <attVal ns="xsl=~ ixsl=~ xs=~ svg=http://www.w3.org/2000/svg map=http://www.w3.org/2005/xpath-functions/map local=local" line="-1" name="Q{}id" chk="0"/>
 </key>
 <output>
  <property name="{http://saxon.sf.net/}stylesheet-version" value="30"/>
  <property name="method" value="html"/>
 </output>
 <decimalFormat/>
</package>
<?Σ a9a487fc?>
